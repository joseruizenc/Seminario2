//Estructura de Datos y Algoritmos ISW-305
//Facilitador Maikel Aparicio
//2do Seminario, Ordenar listas, Equipo II
//Sustentado por: Jose Ruiz y Jose Anibal Medina,Teddy Paulino

#include <iostream>
#include <stdlib.h>

using namespace std;

/*---------  Estructura del arbol  -------*/
typedef struct nodo {
    int nro;
    struct nodo* izq, * der;
}*ABB;

int numNodos = 0; // nummero de nodos del arbol ABB
int numK = 0;     //


/* ---------- Estructura de la cola ---------*/
struct nodoCola {
    ABB ptr;
    struct nodoCola* sgte;
};
struct cola {
    struct nodoCola* delante;
    struct nodoCola* atras;
};

void inicializaCola(struct cola& q)
{
    q.delante = NULL;
    q.atras = NULL;
}



ABB crearNodo(int x)
{
    ABB nuevoNodo = new(struct nodo);
    nuevoNodo->nro = x;
    nuevoNodo->izq = NULL;
    nuevoNodo->der = NULL;

    return nuevoNodo;
}
void insertar(ABB& arbol, int x)
{
    if (arbol == NULL)
    {
        arbol = crearNodo(x);
        cout << "\n\t  Insertado..!" << endl << endl;
    }
    else if (x < arbol->nro)
        insertar(arbol->izq, x);
    else if (x > arbol->nro)
        insertar(arbol->der, x);
}

void verArbol(ABB arbol, int n)
{
    if (arbol == NULL)
        return;
    verArbol(arbol->der, n + 1);

    for (int i = 0; i < n; i++)
        cout << "   ";

    numNodos++;
    cout << arbol->nro << endl;

    verArbol(arbol->izq, n + 1);
}

bool busquedaRec(ABB arbol, int dato)
{
    int r = 0;   // 0 indica que lo encontre

    if (arbol == NULL)
        return r;

    if (dato < arbol->nro)
        r = busquedaRec(arbol->izq, dato);

    else if (dato > arbol->nro)
        r = busquedaRec(arbol->der, dato);

    else
        r = 1;   // son iguales, lo encontre

    return r;
}

ABB unirABB(ABB izq, ABB der)
{
    if (izq == NULL) return der;
    if (der == NULL) return izq;

    ABB centro = unirABB(izq->der, der->izq);
    izq->der = centro;
    der->izq = izq;
    return der;
}

void elimina(ABB& arbol, int x)
{
    if (arbol == NULL) return;

    if (x < arbol->nro)
        elimina(arbol->izq, x);
    else if (x > arbol->nro)
        elimina(arbol->der, x);

    else
    {
        ABB p = arbol;
        arbol = unirABB(arbol->izq, arbol->der);
        delete p;
    }
}

void menu()
{
    //system("cls");
    cout << "\n\t\t  ..[ ARBOL BINARIO DE BUSQUEDA ]..  \n\n";
    cout << "\t [1]  Insertar elemento                  \n";
    cout << "\t [2]  Mostrar arbol                      \n";
    cout << "\t [3]  Buscar elemento                    \n";
    cout << "\t [4]  Eliminar elemento                  \n";
    cout << "\t [5]  Contar nodos                       \n";
    cout << "\t [6]  SALIR                              \n";

    cout << "\n\t Ingrese opcion : ";
}


int main()
{
    ABB arbol = NULL;
    int x;
    int op;


    //system("color f9");   // poner color a la consola
    do
    {
        menu();  cin >> op;
        cout << endl;

        switch (op)
        {
        case 1:
            cout << " Ingrese valor : ";  cin >> x;
            insertar(arbol, x);
            break;

        case 2:
            verArbol(arbol, 0);
            break;

        case 3:
            bool band;

            cout << " Valor a buscar: "; cin >> x;

            band = busquedaRec(arbol, x);

            if (band == 1)
                cout << "\n\tEncontrado...";
            else
                cout << "\n\tNo encontrado...";
            break;

        case 4:
            cout << " Valor a Eliminar: "; cin >> x;
            elimina(arbol, x);
            cout << "\n\t Eliminado..!";
            break;

       
        case 5:
            verArbol(arbol, 0);
            cout << "\n\n El numero de nodos es : ";
            cout << numNodos;
            break;

       case 6:
            exit(0);
        }

        cout << "\n\n\n";
        //system("pause");  // hacer pausa y presionar una tecla para continuar
    } while (op != 6);

}
